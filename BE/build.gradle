plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.ddalkkak'
version = getDate()
def getDate() {
    new Date().format('yyyyMMdd')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.springframework.boot:spring-boot-starter-web:3.2.0'

    //jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.0'

    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

    //h2db
    runtimeOnly 'com.h2database:h2'

    //spring doc
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

    //valid
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.3.1'

    //aop
    implementation 'org.springframework.boot:spring-boot-starter-aop:3.2.0'

    //file upload thumbnail
    implementation 'net.coobird:thumbnailator:0.4.14'

    //jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'

    //oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:3.3.4'

    //QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"


}

tasks.named('test') {
    enabled = false
}

//when build, except test code
tasks.withType(Test) {
    enabled = false
}

//빌드 시 테스트 코드는 제외하고 패키지 한다.
//sourceSets {
//    test {
//        java {
//            srcDirs = [] // 테스트 소스 디렉터리를 비워서 테스트 소스 제외
//        }
//    }
//}

def generated = 'src/main/generated'// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
 options.generatedSourceOutputDirectory = file(generated)
}
// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += "$projectDir/build/generated"
}

//gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file('src/main/generated')
}



